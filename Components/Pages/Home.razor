@page "/"

@rendermode InteractiveServer
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

<div style="padding-top: 20px; visibility: @(IsDivVisible ? "visible" : "hidden");">
    <span @onclick="NavigateToDefault" id="category" style="visibility: @(IsDivVisible ? "visible" : "hidden"); color: #337ab7; display:inline-block">Population</span>
    <p style="visibility: @(IsDivVisible ? "visible" : "hidden"); display:inline-block" id="symbol"> >> </p>
    <p style="visibility: @(IsDivVisible ? "visible" : "hidden"); display:inline-block;">@RegionName</p>
</div>

<div class="control-section" align='center'>
    <SfChart @ref="ChartObj" Title="@ChartTitle" SubTitle="@ChartSubTitle" Width="@Width" UseGroupingSeparator="true">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartEvents OnPointRender="PointRender" OnPointClick="OnPointClick" OnAxisLabelClick="AxisLabelClick" OnDataLabelRender="DataLabelRender">
        </ChartEvents>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1"
                           LabelIntersectAction="@LabelIntersectActions">
            <ChartAxisLabelStyle Color="@Color"></ChartAxisLabelStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Population">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries Fill="@Fill" DataSource="@DataSource" Name="Population" XName="Drilldown" Width="2" Opacity="1"
                         YName="Population" Type="ChartSeriesType.Column"
                         CornerRadius="@(new ChartCornerRadius { TopLeft = 5, TopRight = 5})">
                <ChartMarker>
                    <ChartDataLabel Visible="true" Position="LabelPosition.Outer"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="false" />
        <ChartTooltipSettings Enable="true" Header="<b>Population - 2025</b>"
                              Format="${point.x}: <b>${point.y}</b>"></ChartTooltipSettings>
    </SfChart>
</div>

<style>
    .control-section {
        padding: 0px;
    }
    #category:hover {
        cursor: pointer;
        color: #23527c !important;
        text-decoration: underline;
    }
    g[id*="AxisLabels0"] text[id*="AxisLabel_"] {
        text-decoration: @TextDecoration;
        cursor: pointer;
    }
    g[id*="SeriesGroup0"] path[id*="Series_0_Point_"] {
        cursor: pointer;
    }
</style>

@code {
    private SfChart ChartObj;
    public string TextDecoration = "underline";
    public string Fill = string.Empty;
    public List<string> Colors { get; set; } = new List<string> { "#FFD700", "#FF7F50", "#40E0D0", "#808080", "#008000", "#4682B4", "#FF6347", "#9370DB", "#A0522D", "#800080" };
    public string Color = "blue";
    private bool clicked = false;
    public string Width { get; set; } = "90%";
    private Syncfusion.Blazor.Charts.LabelIntersectAction LabelIntersectActions { get; set; } = Syncfusion.Blazor.Charts.LabelIntersectAction.Rotate90;
    private String ChartTitle { get; set; } = "Top Populated Continents of 2025";
    private String ChartSubTitle { get; set; } = "A Look at Population Rankings and Trends in 2025";
    private bool IsDivVisible { get; set; } = false;
    private string RegionName { get; set; } = string.Empty;
    public List<PopulationData> DataSource { get; set; } = new List<PopulationData>
    {
        new PopulationData { Drilldown = "Asia", Population = 4849336830},
        new PopulationData { Drilldown = "Africa", Population = 1567367367 },
        new PopulationData { Drilldown = "Europe", Population = 744010306 },
        new PopulationData { Drilldown = "America", Population = 1058663026 },
        new PopulationData { Drilldown = "Oceania", Population = 46867762 }
    };
    public class PopulationData
    {
        public double Population { get; set; }
        public string Drilldown { get; set; }
    }
    public void PointRender(PointRenderEventArgs args)
    {
        if (!clicked)
        {
            args.Fill = Colors[args.Point.Index % 10];
        }
    }
    private void NavigateToDefault()
    {
        if (clicked)
        {
            TextDecoration = "underline";
            Color = "blue";
            clicked = false;
            RegionName = "";
            IsDivVisible = false;
            ChartTitle = "Top Populated Continents of 2025";
            DataSource =
            new List<PopulationData>
                    {
                new PopulationData { Drilldown = "Asia", Population = 4849336830},
                new PopulationData { Drilldown = "Africa", Population = 1567367367 },
                new PopulationData { Drilldown = "Europe", Population = 744010306 },
                new PopulationData { Drilldown = "America", Population = 1058663026 },
                new PopulationData { Drilldown = "Oceania", Population = 46867762 }
                    };
            ChartObj.PreventRender(false);
        }
        StateHasChanged();
    }
    public void AxisLabelClick(AxisLabelClickEventArgs args)
    {
        if (args.Index != 6)
        {
            if (!clicked)
            {
                TextDecoration = "none";
                Fill = Colors[args.Index % 10];
                IsDivVisible = true;
                UpdateDataSource(args.Index);
                StateHasChanged();
            }
        }
    }
    public void OnPointClick(PointEventArgs args)
    {
        if (args.Point.Index != 6)
        {
            if (!clicked)
            {
                TextDecoration = "none";
                Fill = Colors[args.Point.Index % 10];
                IsDivVisible = true;
                UpdateDataSource(args.Point.Index);
            }
            else
            {
                ChartObj.PreventRender();
            }
        }
    }

    public void UpdateDataSource(int index)
    {
        switch (index)
        {
            case 0:
                clicked = true;
                ChartTitle = "Top Populated Countries of Asia - 2025";
                RegionName = "Asia";
                DataSource = new List<PopulationData>
                        {
                            new PopulationData { Population = 1416096094, Drilldown = "China" },
                            new PopulationData { Population = 1463865525, Drilldown = "India" },
                            new PopulationData { Population = 285721236, Drilldown = "Indonesia" },
                            new PopulationData { Population = 240485658, Drilldown = "Pakistan" },
                            new PopulationData { Population = 173674000, Drilldown = "Bangladesh" },
                            new PopulationData { Population = 125214000, Drilldown = "Japan" },
                            new PopulationData { Population = 117337000, Drilldown = "Philippines" },
                            new PopulationData { Population = 99145000, Drilldown = "Vietnam" }
                        };
                break;
            case 1:
                clicked = true;
                ChartTitle = "Top Populated Countries of Africa - 2025";
                RegionName = "Africa";
                DataSource = new List<PopulationData>
                        {
                            new PopulationData { Population = 223804632, Drilldown = "Nigeria" },
                            new PopulationData { Population = 126527060, Drilldown = "Ethiopia" },
                            new PopulationData { Population = 113733760, Drilldown = "EgPopulationpt" },
                            new PopulationData { Population = 68260196, Drilldown = "Tanzania" },
                            new PopulationData { Population = 60041463, Drilldown = "South Africa" },
                            new PopulationData { Population = 55506699, Drilldown = "KenPopulationa" },
                            new PopulationData { Population = 48722967, Drilldown = "Uganda" }
                        };
                break;
            case 2:
                clicked = true;
                ChartTitle = "Top Populated Countries of Europe - 2025";
                RegionName = "Europe";
                DataSource = new List<PopulationData>
                        {
                            new PopulationData { Population = 143400000, Drilldown = "Russia" },
                            new PopulationData { Population = 84171726, Drilldown = "GermanPopulation" },
                            new PopulationData { Population = 67508979, Drilldown = "United Kingdom" },
                            new PopulationData { Population = 65488764, Drilldown = "France" },
                            new PopulationData { Population = 59037422, Drilldown = "ItalPopulation" },
                            new PopulationData { Population = 47432899, Drilldown = "Spain" }
                        };
                break;
            case 3:
                clicked = true;
                ChartTitle = "Top Populated Countries of North America - 2025";
                RegionName = "North America";
                DataSource = new List<PopulationData>
                        {
                            new PopulationData { Population = 339996563, Drilldown = "United States" },
                            new PopulationData { Population = 127504125, Drilldown = "Mexico" },
                            new PopulationData { Population = 39047872, Drilldown = "Canada" },
                            new PopulationData { Population = 19161239, Drilldown = "Guatemala" },
                            new PopulationData { Population = 10233527, Drilldown = "Honduras" },
                            new PopulationData { Population = 6486205, Drilldown = "El Salvador" },
                            new PopulationData { Population = 6782105, Drilldown = "Nicaragua" },
                            new PopulationData { Population = 5300996, Drilldown = "Costa Rica" }
                        };
                break;
            case 4:
                clicked = true;
                ChartTitle = "Top Populated Countries of Oceania - 2025";
                RegionName = "Oceania";
                DataSource = new List<PopulationData>
                        {
                            new PopulationData { Population = 26784599, Drilldown = "Australia" },
                            new PopulationData { Population = 9594300, Drilldown = "Papua New Guinea" },
                            new PopulationData { Population = 5122600, Drilldown = "New Zealand" }
                        };
                break;
        }
    }

    public void DataLabelRender(TextRenderEventArgs args)
    {
        double value;
        if (double.TryParse(args.Text, out value))
        {
            args.Text = FormatNumber(value);
        }
    }

    private string FormatNumber(double num)
    {
        if (num >= 1_000_000_000)
            return (num / 1_000_000_000).ToString("0.#") + " B";
        else if (num >= 1_000_000)
            return (num / 1_000_000).ToString("0.#") + " M";
        else
            return num.ToString("0");
    }
}